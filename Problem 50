'''
This problem was asked by Microsoft.

Suppose an arithmetic expression is given as a binary tree. Each leaf is an integer and each internal node is one of '+', '−', '∗', or '/'.

Given the root to such a tree, write a function to evaluate it.

For example, given the following tree:

    *
   / \
  +    +
 / \  / \
3  2  4  5
You should return 45, as it is (3 + 2) * (4 + 5).


'''

exp=input()
digits="0123456789"

def evaluate(exp):
    stack=[]
    for i in exp:
        
        if(i in digits):
            stack.append(int(i))
            
        else:
            if(len(stack)>=2):
                a=stack.pop()
                b=stack.pop()
                
            if(i=='*'):
                stack.append(a*b)
                
            elif(i=='+'):
                stack.append(a+b)
                
            elif(i=='-'):
                stack.append(b-a)
                
            elif(i=='/'):
                stack.append(b/a)
                
            else:
                pass
    return stack[-1]
    
def isempty(s):
    if(s==[]):
        return True
    else:
        return False
        
def infix_postfix(exp):
    
    one="+-"
    two="*/"
    stack=[]
    postfix=""
    for i in exp:
        if(i in digits):
            postfix+=i
            
        elif(i=='('):
            stack.append(i)
            
        elif(i==')'):
            while(not isempty(stack) and stack[-1]!='('):
                postfix+=stack.pop()
            stack.pop()
            
        elif(i in one):
            stack.append(i)
            
        elif(i in two):
            while(not isempty(stack) and stack[-1] in one and stack[-1]!='('):
                postfix+=stack.pop()
            stack.append(i) 
    while(not isempty(stack)):
        postfix+=stack.pop()
    return postfix
    
print(evaluate(infix_postfix(exp)))
