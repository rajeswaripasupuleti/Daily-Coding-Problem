/*

This problem was asked by Google.

Given the head of a singly linked list, reverse it in-place.

*/

import java.util.*;

class Node 
{
    int data;
    Node next;
    public Node(int data)
    {
        this.data=data;
        this.next=null;
    }
}

class LinkedList 
{
    Node head;
    LinkedList()
    {
        head=null;
    }
    void insert(int data)
    {
        head=insertNode(head,data);
    }
    
    Node insertNode(Node head,int data)
    {
        Node n=new Node(data);
       if(head==null)
       {
          head=n;
        return head;
       }
       else 
       {
          Node temp;
        temp=head;
         while(temp.next!=null)
            {
                temp=temp.next;
            }
            temp.next=n;
       }
        return head;
    }
    public void reverse()
    {
     Node prev = null;
        Node cur = head;
        Node next = null;
        while (cur != null) {
            next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        head = prev;
    }
    public void traverse()
    {
        Node temp=this.head;
        while(temp.next!=null)
        {
            System.out.print(temp.data+" -> ");
            temp=temp.next;
        }
        System.out.print(temp.data);
    }
}

public class Main
{
    
	public static void main(String[] args) {
	    Scanner s=new Scanner(System.in);
	    Main m=new Main();
	    int n,k;
	    LinkedList l=new LinkedList();
	    do
	    {
	        System.out.println("Enter an element to insert : ");
	        int ele=s.nextInt();
	        l.insert(ele);
	         System.out.println("Enter 0 to stop ");
	         n=s.nextInt();
	    }while(n!=0);
	     l.reverse();
	     l.traverse();
	      
	}
}
